//As Per https://developer.android.com/studio/publish/app-signing.html#release-mode
def keyStorePropertiesExists = rootProject.file("keystore.properties").exists()
def keystoreProperties = new Properties()

if (keyStorePropertiesExists) {
    keystoreProperties.load(new FileInputStream(rootProject.file("keystore.properties")))
}

buildscript {
    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath "digital.wup:android-maven-publish:$version_android_maven_publish"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$version_kotlin"
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:$version_kotlin"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$version_kotlin"
    }
}

apply plugin: 'com.android.library'
apply plugin: "kotlin-multiplatform"
apply plugin: 'kotlin-android-extensions'
apply plugin: "jacoco"
apply plugin: 'digital.wup.android-maven-publish'
apply plugin: 'kotlinx-serialization'
apply plugin: "kotlin-kapt"


configurations.all {
    exclude group: "net.sf.kxml", module: "kxml2"
    exclude group: "org.json", module: "json"
}

kotlin {

    targets {
        fromPreset(presets.android, 'android')
    }
}

afterEvaluate {
    android.libraryVariants.all { variant ->
        variant.javaCompileProvider.get().dependsOn(generateCoreStringToAndroidResMap)
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.toLowerCase().endsWith("androidtest")) {
        //TODO: This needs to depend on the new lib-http-testserver for end-to-end tests
        //task.dependsOn(":lib-http-testserver:startDaemon")
    }
}

android {
    dataBinding {
        enabled = true
    }

    sourceSets {
        main.assets.srcDirs += "../core/src/main/assets/"
        main.res.srcDirs += "../core/locale/main/"
        main.java.srcDirs += "build/generated/source/umlocale/"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }

    dexOptions {
        javaMaxHeapSize "2g"
    }

    signingConfigs {
        release {
            keyAlias keyStorePropertiesExists ? keystoreProperties['keyAlias'] : "default"
            keyPassword keyStorePropertiesExists ? keystoreProperties['keyPassword'] : "default"
            storeFile keyStorePropertiesExists ? file(keystoreProperties['storeFile']) : new File("keystore.ks")
            storePassword keyStorePropertiesExists ? keystoreProperties['storePassword'] : "default"
        }
    }

    lintOptions {
        abortOnError false
    }

    compileSdkVersion rootProject.ext.version_android_compile_sdk
    buildToolsVersion rootProject.ext.version_android_buildtools

    dataBinding {
        enabled = true
    }

    defaultConfig {
        minSdkVersion rootProject.ext.version_android_min_sdk
        targetSdkVersion rootProject.ext.version_android_target_sdk
        vectorDrawables.useSupportLibrary = true
        versionCode rootProject.ext.ustadVersionCode
        versionName rootProject.version
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
        buildConfigField "String", "TEST_HOST", "\"" + rootProject.ext.buildConfigProperties["test.um_http_testserver"] + "\""
        buildConfigField "String", "TEST_PORT", "\"" + rootProject.ext.buildConfigProperties["test.um_http_testserver_controlport"] + "\""
        testInstrumentationRunnerArgument "notAnnotation", "com.ustadmobile.test.core.annotation.PeerServerRequiredTest,com.ustadmobile.test.core.annotation.ImplementationRequiredTest"

        //see https://proandroiddev.com/current-issues-with-kotlin-multiplatform-and-how-to-fix-them-5ae62822a546
        packagingOptions {
            pickFirst "META-INF/io.netty.versions.properties"
            excludes += ['META-INF/INDEX.LIST', "**/*.kotlin_metadata", "META-INF/*.kotlin_module"]
        }

        missingDimensionStrategy 'api', 'api18'
    }

    flavorDimensions "config"

    productFlavors {
        /*
         * The main flavor
         */
        vanilla {
            dimension "config"
            testApplicationId "com.toughra.ustadmobile.test"
            versionCode rootProject.ext.ustadVersionCode
        }

        /*
         * Our main application does not exceed 64K methods, but it does exceed this limit with
         * test libraries. Therefor testing on < Android 4.4 requires multidex to be enabled.
         *
         * Min SDK version = 18 as this is required by ui-automator
         */
        vanillamultidex {
            dimension "config"
            minSdkVersion 18
            multiDexEnabled true
        }

        /**
         * Used for day to day work in Android studio to avoid the need to use multidex when running tests
         */
        devMinApi21 {
            dimension "config"
            minSdkVersion 21
            multiDexEnabled true
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            minifyEnabled false
            useProguard false
            testCoverageEnabled = true
        }
    }
}

/*
 * Disable running tests of the vanilla build (this requires multidex, so we use vanillamultidex instead)
 */
gradle.taskGraph.useFilter { task ->
    if (task.name.equals("connectedVanillaDebugAndroidTest")
            || task.name.equals("createVanillaDebugCoverageReport")
            || task.name.equals("testVanillaDebugUnitTest")
            || task.name.equals("testVanillaReleaseUnitTest")
            || task.name.equals("processVanillaDebugAndroidTestManifest")
            || task.name.equals("transformDexArchiveWithExternalLibsDexMergerForVanillaDebugAndroidTest")) {
        return false
    }

    return true
}

task generateCoreStringToAndroidResMap {
    inputs.files("../core/locale/main/values/*.xml")
    onlyIf {
        /*
         Only run this task if the input files have been updated since the task was last run.
         upToDateWhen was not having the expected effect.
         */
        long inputLastModified = 0L

        rootProject.fileTree(dir: "core/locale/main", include: "values/*.xml").each() { File file ->
            if (file.lastModified() > inputLastModified)
                inputLastModified = file.lastModified()
        }

        File outputFile = project.file("build/generated/source/umlocale/com/ustadmobile/port/android/generated/MessageIDMap.kt")
        return outputFile.lastModified() < inputLastModified;
    }

    doLast {
        Map<String, String> messageIds = new HashMap<>()

        String genSrcHeader, genSrcFooter
        String genSrcBody = ""

        genSrcHeader = "package com.ustadmobile.port.android.generated\n"
        genSrcHeader += "import com.ustadmobile.core.generated.locale.MessageID\n"
        genSrcHeader += "import com.toughra.ustadmobile.R\n"
        genSrcHeader += "import java.util.HashMap\n"
        genSrcHeader += "object MessageIDMap {\n"
        genSrcHeader += "\tval ID_MAP = HashMap<Int, Int>()\n"
        genSrcHeader += "\tinit {\n"

        System.out.println("Looking in: core/locale/main")
        rootProject.fileTree(dir: "core/locale/main", include: "values/*.xml").each() { File file ->
            System.out.println("Found: " + file.getAbsolutePath())
            def xmlDoc = new XmlSlurper().parseText(file.getText("UTF-8"))
            xmlDoc.string.each() { str ->
                String msgName = str.@name
                if (!messageIds.containsKey(msgName)) {
                    messageIds.put(msgName, msgName)
                }
            }
        }

        Iterator<String> nameIterator = messageIds.keySet().iterator();
        while (nameIterator.hasNext()) {
            String strName = nameIterator.next()
            genSrcBody += "\tID_MAP[MessageID." + strName + "] = R.string." + strName + "\n"
        }

        genSrcFooter = "\t}\n"
        genSrcFooter += "}\n"

        File oldMessageIdFile = project.file("build/generated/source/umlocale/com/ustadmobile/port/android/generated/MessageIDMap.kt")
        if (oldMessageIdFile.exists()) {
            oldMessageIdFile.delete()
        }

        File outDir = project.file("build/generated/source/umlocale/com/ustadmobile/port/android/generated")
        if (!outDir.isDirectory()) {
            outDir.mkdirs()
        }

        File outFile = new File(outDir, "MessageIDMap.kt")
        outFile.setText(genSrcHeader + genSrcBody + genSrcFooter, "UTF-8")
    }
}
tasks.whenTaskAdded { task ->
    if (task.name.startsWith("compile") || task.name.startsWith("assemble")) {
        task.dependsOn(generateCoreStringToAndroidResMap, ":lib-content-editor:build")
    }
}


configurations.all {
    resolutionStrategy {
        force "androidx.lifecycle:lifecycle-livedata-core:$version_androidx_lifecycle"
        force "androidx.lifecycle:lifecycle-runtime:$version_androidx_lifecycle"
        force "androidx.arch.core:core-runtime:$version_androidx_arch"
    }
}

dependencies {
    implementation project(':core')
    implementation project(':sharedse')

    /*
     * This is a hack: Intellisense does not seem to recognize classes that are outside the common
     * sourceset (e.g. android/jvm sourcesets) in Kotlin multiplatform project dependencies. Adding
     * this will allow autocomplete etc. to work.
     */
    //compileOnly files("../sharedse/build/libs/sharedse-jvm.jar")

    implementation project(':lib-door-runtime')
    implementation project(':lib-database-android')
    implementation project(":lib-database-entities")
    implementation project(":lib-database-annotations")
    implementation project(':lib-util')

    implementation "com.github.aakira:napier-android:$version_napier"
    implementation "androidx.constraintlayout:constraintlayout:$version_android_constraint_layout"
    vanillamultidexApi "androidx.multidex:multidex:$version_android_multidex"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$version_kotlinx_serialization"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$version_coroutines"

    //ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$version_androidx_lifecycle"
    kapt "androidx.lifecycle:lifecycle-common-java8:$version_androidx_lifecycle"

    // Room (annotation processing takes place only on lib-database-android to improve build times)
    implementation "androidx.room:room-runtime:$version_android_room"

    implementation "androidx.core:core-ktx:$version_androidx_core"

    // Paging
    implementation "androidx.paging:paging-runtime:$version_androidx_paging"

    //Work manager
    implementation "androidx.work:work-runtime:$version_android_workmanager"

    //Klock
    implementation "com.soywiz:klock-android:$version_klock"

    //Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$version_kotlin"

    //Crash reporting
    implementation "ch.acra:acra-http:$version_android_acra"


    implementation "com.github.TellH:RecyclerTreeView:$version_tellh_recyclertreeview"

    implementation "androidx.legacy:legacy-support-core-utils:$version_androidx_legacy"
    implementation "androidx.appcompat:appcompat:$version_androidx_support_lib"
    implementation "androidx.cardview:cardview:$version_androidx_cardview"
    implementation "com.google.android.material:material:$version_android_material"
    implementation "androidx.legacy:legacy-support-v4:$version_androidx_legacy"
    implementation "androidx.recyclerview:recyclerview:$version_androidx_recyclerview"
    implementation "androidx.constraintlayout:constraintlayout:$version_android_constraint_layout"

    implementation "com.google.android.gms:play-services-safetynet:$version_android_play_services_safetynet"

    //Image loading library
    implementation "com.squareup.picasso:picasso:$version_android_picasso"

    //Floating action button with support for popup choices
    implementation 'com.github.clans:fab:1.6.4'

    //Page indicator
    implementation 'com.romandanylyk:pageindicatorview:1.0.0@aar'

    // shake detector
    implementation "com.squareup:seismic:$version_android_seismic"

    implementation 'de.hdodenhof:circleimageview:2.1.0'

    implementation "com.google.android.exoplayer:exoplayer:$version_exo_player"

    //used for learner progress view - needs removed because this clashes with material dependency.
    //implementation 'com.txusballesteros:FitChart:1.0'

    //Chart library
    implementation "com.github.PhilJay:MPAndroidChart:$version_mpandroidchart"

    implementation "com.google.android:flexbox:$version_android_flexbox"

    //SVG support for Android
    implementation 'com.pixplicity.sharp:library:1.1.0'

    //Support for encrypted zips
    implementation "net.lingala.zip4j:zip4j:$version_zip4j"

    //Gson for JSON serializing and deserializing
    implementation "com.google.code.gson:gson:$version_gson"


    //KTOR
    implementation "io.ktor:ktor-client-gson:$version_ktor"
    implementation "io.ktor:ktor-client-okhttp:$version_ktor"
    implementation "io.ktor:ktor-client-cio:$version_ktor"

    //Codec2 (low bitrate voice) Android library
    implementation "com.ustadmobile.codec2:libcodec2-android:0.8-SNAPSHOT64-2"

    //Implements app-wide rotation for presentation mode
    implementation "rongi.rotate-layout:rotate-layout:$version_android_rotatelayout"

    androidTestImplementation project(":lib-test-common")
    androidTestImplementation "io.ktor:ktor-server-servlet:$version_ktor"
    androidTestImplementation "junit:junit:$version_junit"
    androidTestImplementation group: 'androidx.annotation', name: 'annotation', version: "$version_androidx_annotation"

    //As per: https://developer.android.com/topic/libraries/testing-support-library/packages.html#gradle-dependencies
    androidTestImplementation "androidx.test:runner:$version_android_junit_runner"
    androidTestImplementation "androidx.test:rules:$version_android_junit_runner"
    androidTestUtil "androidx.test:orchestrator:$version_android_junit_runner"
    androidTestImplementation "androidx.test.espresso:espresso-core:$version_android_espresso"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$version_android_espresso"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$version_android_espresso"
    androidTestImplementation "androidx.test.espresso:espresso-web:$version_android_espresso"

    androidTestImplementation "androidx.test.uiautomator:uiautomator:$version_android_uiautomator"

    androidTestImplementation "org.mockito:mockito-android:$version_android_mockito"
    androidTestImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$version_kotlin_mockito"

    testImplementation "org.mockito:mockito-core:$version_android_mockito"

    testImplementation "org.robolectric:robolectric:$version_android_roboelectric"

    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$version_mockwebserver"

    androidTestImplementation "commons-io:commons-io:$version_commons_io"

    androidTestImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$version_kotlin_mockito"


    //http server
    implementation "org.nanohttpd:nanohttpd:$version_nanohttpd"
    implementation "org.nanohttpd:nanohttpd-nanolets:$version_nanohttpd"

    testImplementation "junit:junit:$version_junit"
    testImplementation "com.squareup.okhttp3:okhttp:$version_okhttp"

    //image compressor
    implementation "id.zelory:compressor:$version_compressor"

    //extended fab
    implementation "com.github.dimorinny:floating-text-button:$version_android_fab_extended"

    //bottom navigation
    implementation "com.aurelhubert:ahbottomnavigation:$version_android_bottom_nav"
    
    //TODO: this and core should be modified so that Android uses only Android kotlin multiplatform variants
    androidTestImplementation "com.ustadmobile.kmpxmlpullparser:kmpxmlpullparser-jvm:$version_kmp"

    //Range seekbar by Crystal
    implementation "com.crystal:crystalrangeseekbar:$version_crystalrangeseekbar"

    //Bottom Navigation
    implementation "com.aurelhubert:ahbottomnavigation:$version_android_ahbottomnavigation"

    //Android play core for update support within the application
    implementation "com.google.android.play:core:$version_play_core"

}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "source"
}

publishing {
    publications {
        //For the moment - publish only vanilla debug variant. Can publish others as per:
        // https://github.com/wupdigital/android-maven-publish
        mavenLocalconfigAar(MavenPublication) {
            from components.findByName("androidVanillaDebug")
            groupId rootProject.group
            artifactId project.name
            version rootProject.version
        }

    }

    repositories {
        //Set this in projectdir/extrasettings.gradle
        maven {
            url rootProject.ext.buildConfigProperties['repo.dir']
        }
    }
}
