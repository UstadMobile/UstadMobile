// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.version_kotlin = '1.3.61'
    ext.version_shadow = "5.2.0"
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.1'
        classpath 'com.google.gms:google-services:4.3.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$version_kotlin"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$version_kotlin"
        classpath "com.github.jengelman.gradle.plugins:shadow:$version_shadow"
        classpath "com.gradle:gradle-enterprise-gradle-plugin:3.1.1"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

apply plugin: "com.gradle.build-scan"

allprojects {
    repositories {
        google()
        jcenter()

        maven {
            url "https://devserver2.ustadmobile.com/repo-mvn"
        }

        maven {
            url  "https://dl.bintray.com/ustadmobile/maven"
        }

        maven {
            url "https://kotlin.bintray.com/kotlinx"
        }
        maven {
            url "https://dl.bintray.com/soywiz/soywiz"
        }

        maven { url "https://jitpack.io" }
    }
}

subprojects {
    if(Arrays.asList("lib-database-runtime",
            "lib-database-runtime-jdbc", "lib-database-jdbc", "lib-database-retrofitrepository",
            "lib-core-fs", "app-rest-server",
            "core-tests", "lib-content-scrapers").contains(name)) {
        apply plugin: "kotlin"
    }
}


//Major.minor.database version
version = "0.2.23"
group = "com.ustadmobile.app"

ext {
    ustadVersion = project.version
    ustadVersionCode = 179

    version_gradle_buildconfig_plugin = "1.1.7"
    version_jacoco_tool = "0.8.4"
    version_kotlin_jvmTarget = "1.8"
    version_kotlinx_serialization = "0.14.0"
    version_klock = "1.4.0"
    version_kmp = "0.0.2"
    version_ktor = "1.2.3"
    version_coroutines = "1.2.2"
    version_atomicfu = "0.12.9"
    version_krypto = "1.0.1"

    version_junit = "4.12"
    version_nanohttpd = "2.3.1"
    version_zip4j = "1.3.2"
    version_kxml = "2.3.0"
    version_json = "20160212"
    version_qrcodelibfork = "1.0.3"

    //3.12.6 is the latest (backport) OKHttp version that still supports Android 4
    // see https://medium.com/square-corner-blog/okhttp-3-13-requires-android-5-818bb78d07ce
    version_okhttp = "3.12.6"
    version_commons_io = "2.5"
    version_gson = "2.8.2"
    version_apache_commons_cli = "1.4"
    version_apache_commons_lang = "3.8.1"
    version_apache_commons_text = "1.6"
    version_apache_commons_dbcp2 = "2.5.0"
    version_mpandroidchart = "v3.0.3"

    version_mockwebserver = "3.10.0"
    version_javapoet = "1.11.1"
    version_reflections = "0.9.11"
    version_simple_jndi = "0.17.2"
    version_sqlite_jdbc = "3.23.1"
    version_jsqlparser = "0.9"
    version_core_mockito = "3.1.0"
    version_kotlin_mockito = "2.2.0"
    version_compressor = "2.1.0"
    version_apache_commons_pool2 = "2.6.0"
    version_jsoup = "1.11.3"
    version_selenium = "3.141.59"
    version_chrome_manager = "3.7.1"
    version_nv_lang = "1.23"
    version_web_driver = "3.6.2"
    version_jersey = "2.27"
    version_retrofit = "2.4.0"
    version_postgres_jdbc = "42.2.5"
    version_log4j = "2.8.2"
    version_exo_player = "2.8.4"
    version_napier = "1.1.0"
    version_tellh_recyclertreeview = "1.2.0"
    version_logback = "1.0.13"

    version_android_buildtools = "29.0.0"
    version_android_compile_sdk = 29
    version_android_target_sdk = 29
    version_android_min_sdk = 18
    version_android_picasso = 2.71828

    //Androidx versions as per https://developer.android.com/jetpack/androidx/versions
    version_androidx_support_lib = "1.1.0"
    version_androidx_annotation = "1.1.0"

    //As per https://maven.google.com/web/index.html
    version_android_material = "1.1.0"
    version_androidx_appcompat = "1.1.0"
    version_androidx_core = '1.2.0'
    version_androidx_cardview = "1.0.0"
    version_androidx_coordinatorlayout = "1.1.0"
    version_androidx_lifecycle = "2.2.0"
    version_androidx_legacy = "1.0.0"
    version_android_room = "2.2.3"
    version_androidx_arch = "2.1.0"
    version_androidx_recyclerview = "1.1.0"
    version_android_multidex = "2.0.0"
    version_android_workmanager = "2.2.0"
    version_androidx_paging = "2.1.1"
    version_android_constraint_layout = "1.1.3"
    version_android_flexbox = "0.3.2"
    version_android_espresso = "3.1.0"
    version_android_acra = "5.3.0-rc02"
    version_android_junit_runner = "1.1.0"
    version_android_mockito = "3.1.0"
    version_android_roboelectric = "4.3"
    version_android_uiautomator = "2.2.0"
    version_android_maven_publish = "3.6.2"
    version_android_firebase_auth = "16.0.4"
    version_android_facebook_login = "4.37.0"
    version_android_twitter_login = "3.3.0"
    version_android_seismic = "1.0.2"
    version_android_fab_extended = "0.0.4"
    version_android_rotatelayout = "3.0.0"
    version_android_bottom_nav = "2.3.4"
    version_play_core = "1.6.4"
    version_android_leakcanary = "2.1"
    version_android_play_services_safetynet = "17.0.0"

    version_js_node = "10.15.1"
    version_js_yarn="1.13.0"

    version_crystalrangeseekbar="1.1.3"
    version_android_ahbottomnavigation="2.1.0"
}

/*
 * Look for a command. If a variable in buildconfig specifies the path, and the file exists, then
 * use the variable value. Otherwise search the system path.
 */
ext.findCommand = {String command, String buildConfigVarName ->
    if(ext.buildConfigProperties.containsKey(buildConfigVarName) && rootProject.file(ext.buildConfigProperties.getProperty(buildConfigVarName)).exists()) {
        return ext.buildConfigProperties.getProperty(buildConfigVarName)
    }else {
        def pathDirs = System.getenv("PATH").split(File.pathSeparator)
        for(path in pathDirs) {
            if(file("$path/$command").exists()) {
                return "$path/$command"
            }
        }
    }

    return "PATHNOTFOUND"
}


ext.buildConfigProperties = new Properties()
ext.buildConfigProperties.load(new FileInputStream(project.file("buildconfig.default.properties")))
if(project.file("buildconfig.local.properties").exists()) {
    ext.buildConfigProperties.load(new FileInputStream(project.file("buildconfig.local.properties")))
}

ext.localProperties = new Properties()
ext.localProperties.load(new FileInputStream(project.file("local.properties")))

/**
 * Make sure lib-database:jsJar depends on lib-database:jvmJar
 */
subprojects { project -> afterEvaluate {
   if(project.name == "lib-database" && project.tasks.findByName("jsJar") != null){
       project.tasks.findByName("jsJar").dependsOn(project.tasks.findByName("jvmJar"))
   }
}}

