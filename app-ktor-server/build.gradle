
plugins {
    id 'application'
    id 'kotlin'
    id "io.ktor.plugin" version "$version_ktor"
    id 'kotlinx-serialization'
    alias(libs.plugins.license)
}

distributions {
    main {
        distributionBaseName = 'ustad-server'
    }
}

compileKotlin{
    kotlinOptions.jvmTarget = "17"
    kotlinOptions {
        freeCompilerArgs += "-Xopt-in=com.squareup.kotlinpoet.metadata.KotlinPoetMetadataPreview"
        freeCompilerArgs += "-Xexpect-actual-classes"
    }

}

compileTestKotlin {
    kotlinOptions.jvmTarget = "17"
    kotlinOptions {
        freeCompilerArgs += "-Xopt-in=com.squareup.kotlinpoet.metadata.KotlinPoetMetadataPreview"
        freeCompilerArgs += "-Xexpect-actual-classes"
    }
}

application {
    mainClass = 'com.ustadmobile.lib.rest.ServerAppMain'
    applicationName = "ustad-server"
}

tasks.withType(CreateStartScripts) {
    unixStartScriptGenerator.template = resources.text.fromFile("$projectDir/src/scripttemplates/unixStartScript.txt")
    windowsStartScriptGenerator.template = resources.text.fromFile("$projectDir/src/scripttemplates/windowsStartScript.txt")
}

ktor {
    fatJar {
        archiveFileName.set("ustad-server-all.jar")
    }
}

sourceSets.main {
    if(findProperty("ktorbundleproductionjs") == "true") {
        resources.srcDir(rootProject.file("app-react/build/dist-web/"))
    }
}

licenseReport {
    generateHtmlReport = false
    generateTextReport = true
}

tasks.register("copyLicenseReport", Copy) {
    from(project.file("build/reports/licenses/licenseReport.txt"))
    into(project.file("src/dist/licenses"))
    rename { "packages-licenses.txt" }
}

tasks.configureEach {
    if(it.name == "licenseReport") {
        tasks.getByName("copyLicenseReport").dependsOn(it)
    }
}

dependencies {
    implementation "io.ktor:ktor-client-core:$version_ktor"
    implementation "io.ktor:ktor-serialization-kotlinx-json:$version_ktor"
    implementation "io.ktor:ktor-client-content-negotiation:$version_ktor"
    implementation "io.ktor:ktor-io:$version_ktor"

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "io.ktor:ktor-server-netty:$version_ktor"
    implementation "io.ktor:ktor-server-cors:$version_ktor"
    implementation "io.ktor:ktor-server-call-logging:$version_ktor"
    implementation "io.ktor:ktor-server-content-negotiation:$version_ktor"
    implementation "io.ktor:ktor-server-conditional-headers:$version_ktor"
    implementation "io.ktor:ktor-server-status-pages:$version_ktor"

    implementation "io.ktor:ktor-serialization-gson:$version_ktor"
    implementation "io.ktor:ktor-client-core:$version_ktor"
    implementation libs.ktor.client.okhttp
    implementation "io.ktor:ktor-server-html-builder:$version_ktor"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$version_kotlinx_serialization"

    implementation libs.simplejndi
    implementation "org.apache.commons:commons-pool2:$version_apache_commons_pool2"
    implementation "org.xerial:sqlite-jdbc:$version_sqlite_jdbc"
    implementation "org.postgresql:postgresql:$version_postgres_jdbc"


    implementation "commons-io:commons-io:$version_commons_io"
    implementation "org.jsoup:jsoup:$version_jsoup"
    implementation "com.google.code.gson:gson:$version_gson"
    implementation "org.apache.commons:commons-lang3:$version_apache_commons_lang"
    implementation "ch.qos.logback:logback-classic:$version_logback"

    implementation "org.kodein.di:kodein-di:$version_kodein_di"
    implementation "org.kodein.di:kodein-di-framework-ktor-server-jvm:$version_kodein_di"

    implementation libs.napier

    implementation "com.github.UstadMobile:xmlpullparserkmp:$version_xmlpullparserkmp"
    implementation "net.sf.kxml:kxml2:$version_kxml"

    implementation libs.quartz
    implementation "io.ktor:ktor-server-websockets:$version_ktor"


    implementation project(":core")
    implementation project(":sharedse")
    implementation project(":lib-database")
    implementation libs.door.room.annotations
    implementation libs.door.runtime
    implementation project(":lib-util")

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$version_kotlin"

    implementation "io.netty:netty-tcnative-boringssl-static:$version_netty_tcnative"

    implementation "com.sun.mail:jakarta.mail:$version_jakartamail"

    implementation "net.sourceforge.argparse4j:argparse4j:$version_argparse4j"
    implementation "org.jetbrains.kotlinx:kotlinx-datetime:$version_kotlinx_datetime"
    implementation libs.javaffmpeg

    api libs.moko.resources

    implementation project(":lib-cache")

    implementation(libs.libphonenumber.google)

    implementation libs.hsqldb

    //test
    testImplementation project(":lib-test-common")
    testImplementation project(":sharedse")

    testImplementation "io.ktor:ktor-server-test-host:$version_ktor"
    testImplementation libs.mockito.kotlin

    testImplementation libs.simplejndi
    testImplementation "org.apache.commons:commons-pool2:$version_apache_commons_pool2"
    testImplementation "org.xerial:sqlite-jdbc:$version_sqlite_jdbc"
    testImplementation "org.apache.commons:commons-dbcp2:$version_apache_commons_dbcp2"
    testImplementation "io.ktor:ktor-server-netty:$version_ktor"
    testImplementation libs.mockwebserver

    testImplementation libs.ktor.client.okhttp
    testImplementation "io.ktor:ktor-serialization-gson:$version_ktor"

    testImplementation "org.apache.commons:commons-pool2:$version_apache_commons_pool2"
    testImplementation "org.xerial:sqlite-jdbc:$version_sqlite_jdbc"
    testImplementation "org.apache.commons:commons-dbcp2:$version_apache_commons_dbcp2"
    testImplementation "org.postgresql:postgresql:$version_postgres_jdbc"

}

mainClassName = 'com.ustadmobile.lib.rest.ServerAppMain'

sourceCompatibility = "17"
targetCompatibility = "17"

if(findProperty("ktorbundleproductionjs") == "true") {
    //Required to ensure that JS resources are ready before any other task copies them etc.
    processResources.dependsOn(":app-react:build")
}
