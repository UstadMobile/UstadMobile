apply plugin: 'com.android.library'
apply plugin: 'digital.wup.android-maven-publish'
apply plugin: "kotlin-android"
apply plugin: 'kotlin-kapt'

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "digital.wup:android-maven-publish:$version_android_maven_publish"
    }
}

android {
    compileSdkVersion rootProject.ext.version_android_compile_sdk

    packagingOptions {
        // .kotlin_metadata files come from multiplatform modules, but are not needed unless we
        // use kotlin reflection, which we don't.
        excludes += ['META-INF/INDEX.LIST', "**/*.kotlin_metadata", "META-INF/*.kotlin_module"]
    }

    sourceSets {
        main.java.srcDirs += ["build/generated/source/door"]
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    defaultConfig {
        minSdkVersion rootProject.ext.version_android_min_sdk
        targetSdkVersion rootProject.ext.version_android_target_sdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    //We only have an additional flaovr so that the test variant can target the higher api required to run Room testing
    flavorDimensions "api"

    productFlavors {
        /**
         * This dimension if the default that should be used by all dependencies
         */
        api18 {
            dimension "api"
        }

        /**
         * This dimension is only here because of Room's migration tester requirements
         */
        api21 {
            dimension "api"
            minSdkVersion 21
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testCoverageEnabled = true
        }
    }

}

kapt {
    arguments {
        arg("room.schemaLocation", "$projectDir/schemas")
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(":lib-database-entities")
    implementation project(':lib-door-runtime')
    implementation project(":lib-database-annotations")
    implementation project(':lib-util')

    //Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$version_kotlin"

    //Repository dependencies
    implementation "io.ktor:ktor-client-core:$version_ktor"
    implementation "io.ktor:ktor-client-json:$version_ktor"
    implementation "io.ktor:ktor-client-okhttp:$version_ktor"
    implementation "io.ktor:ktor-client-gson:$version_ktor"


    //ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$version_androidx_lifecycle"
    kapt "androidx.lifecycle:lifecycle-common-java8:$version_androidx_lifecycle"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$version_kotlinx_serialization"

    //Room persistence
    implementation "androidx.room:room-runtime:$version_android_room"
    kapt "androidx.room:room-compiler:$version_android_room"
    //compileOnly  "androidx.room:room-compiler:$version_android_room"

    implementation "androidx.room:room-ktx:$version_android_room"


    // Paging
    implementation "androidx.paging:paging-runtime:$version_androidx_paging"

    implementation "org.nanohttpd:nanohttpd:$version_nanohttpd"
    implementation "org.nanohttpd:nanohttpd-nanolets:$version_nanohttpd"


    implementation "androidx.appcompat:appcompat:$version_androidx_support_lib"
    implementation "androidx.legacy:legacy-support-core-utils:$version_androidx_legacy"

    testImplementation "junit:junit:$version_junit"
    androidTestImplementation "androidx.room:room-testing:$version_android_room"
    testImplementation "org.robolectric:robolectric:$version_android_roboelectric"
    androidTestImplementation "androidx.test:runner:$version_android_junit_runner"
    androidTestImplementation "androidx.test.espresso:espresso-core:$version_android_espresso"
}

publishing {
    publications {
        mavenAar(MavenPublication) {
            from components.android

            groupId rootProject.group
            artifactId project.name
            version "${rootProject.version}"
        }
    }

    repositories {
        //Set this in projectdir/extrasettings.gradle
        maven {
            url rootProject.ext.buildConfigProperties['repo.dir']
        }
    }
}